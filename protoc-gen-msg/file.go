package main

import (
	"bytes"
	"fmt"
	"go/parser"
	"go/printer"
	"go/token"
	"text/template"

	"github.com/jingwanglong/cellnet/util"
	"github.com/davyxu/pbmeta"
)

const codeTemplate = `// Generated by db-server/protoc-gen-msg
// DO NOT EDIT!{{range .Protos}}
// Source: {{.Name}}{{end}}

package {{.PackageName}}

{{if gt .TotalMessages 0}}
import (
	"github.com/jingwanglong/cellnet"
	"reflect"
	_ "github.com/jingwanglong/cellnet/codec/pb"
)
{{end}}

func init() {
	{{range .Protos}}
	// {{.Name}}
	{{range .RequestMessages}}
	cellnet.RegisterMessageMeta("pb","{{.FullName}}", reflect.TypeOf((*{{.Name}})(nil)).Elem(), {{.MsgID}})
	{{end}}

	{{range .ResponseMessages}}
	cellnet.RegisterResponseMsgMeta("pb","{{.FullName}}", reflect.TypeOf((*{{.Name}})(nil)).Elem(), {{.MsgID}})
	{{end}}
	{{end}}
}

`

type msgModel struct {
	*pbmeta.Descriptor

	parent *pbmeta.FileDescriptor
}

func (self *msgModel) MsgID() int {
	cmdKey := self.Name() + "_CMD"
	d := self.parent.EnumValueByName(cmdKey)
	if d != nil {
		//fmt.Printf("%s msg id is %d----------", self.Name(), d.Value())
		return int(d.Value())
	}
	return int(util.StringHash(self.FullName()))
}

func (self *msgModel) FullName() string {
	return fmt.Sprintf("%s.%s", self.parent.PackageName(), self.Name())
}

type protoModel struct {
	*pbmeta.FileDescriptor

	RequestMessages  []*msgModel
	ResponseMessages []*msgModel
}

func (self *protoModel) Name() string {
	return self.FileDescriptor.FileName()
}

type fileModel struct {
	TotalMessages  int
	Protos         []*protoModel
	PackageName    string
}

func printFile(pool *pbmeta.DescriptorPool) (string, bool) {

	tpl, err := template.New("msgid").Parse(codeTemplate)
	if err != nil {
		log.Errorln(err)
		return "", false
	}

	if pool.FileCount() == 0 {
		return "", false
	}

	var model fileModel
	model.PackageName = pool.File(0).PackageName()

	for f := 0; f < pool.FileCount(); f++ {

		file := pool.File(f)

		pm := &protoModel{
			FileDescriptor: file,
		}

		reqCmdEnum := file.EnumByName("ReqMsgID")
		resCmdEnum := file.EnumByName("ResMsgID")

		for m := 0; m < file.MessageCount(); m++ {

			d := file.Message(m)
			cmdKey := d.Name() + "_CMD"

			if reqCmdValue := reqCmdEnum.ValueByName(cmdKey); reqCmdValue != nil {
				pm.RequestMessages = append(pm.RequestMessages, &msgModel{
					Descriptor: d,
					parent:     file,
				})

			}

			if resCmdValue := resCmdEnum.ValueByName(cmdKey); resCmdValue != nil {
				pm.ResponseMessages = append(pm.ResponseMessages, &msgModel{
					Descriptor: d,
					parent:     file,
				})
			}
		}
		model.TotalMessages += file.MessageCount()
		model.Protos  = append(model.Protos, pm)

	}

	var bf bytes.Buffer

	err = tpl.Execute(&bf, &model)
	if err != nil {
		log.Errorln(err)
		return "", false
	}

	err = formatCode(&bf)
	if err != nil {
		log.Errorln(err)
		return "", false
	}

	return bf.String(), true
}

func formatCode(bf *bytes.Buffer) error {
	// Reformat generated code.
	fset := token.NewFileSet()

	ast, err := parser.ParseFile(fset, "", bf, parser.ParseComments)
	if err != nil {
		return err
	}

	bf.Reset()

	err = (&printer.Config{Mode: printer.TabIndent | printer.UseSpaces, Tabwidth: 8}).Fprint(bf, fset, ast)
	if err != nil {
		return err
	}

	return nil
}
